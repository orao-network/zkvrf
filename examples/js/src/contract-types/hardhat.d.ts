/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IOraoVRF",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOraoVRF__factory>;
    getContractFactory(
      name: "IZK",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZK__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "OraoVRF",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraoVRF__factory>;
    getContractFactory(
      name: "OraoVRFConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraoVRFConsumerBase__factory>;
    getContractFactory(
      name: "OraoVRFConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraoVRFConsumer__factory>;
    getContractFactory(
      name: "OraoVRFConsumerFail",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraoVRFConsumerFail__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IOraoVRF",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOraoVRF>;
    getContractAt(
      name: "IZK",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZK>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "OraoVRF",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraoVRF>;
    getContractAt(
      name: "OraoVRFConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraoVRFConsumerBase>;
    getContractAt(
      name: "OraoVRFConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraoVRFConsumer>;
    getContractAt(
      name: "OraoVRFConsumerFail",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraoVRFConsumerFail>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
