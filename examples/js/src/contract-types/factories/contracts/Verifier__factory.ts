/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type { Verifier, VerifierInterface } from "../../contracts/Verifier";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "a",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "b",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "c",
            type: "tuple",
          },
        ],
        internalType: "struct Verifier.Proof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "uint256[12]",
        name: "input",
        type: "uint256[12]",
      },
    ],
    name: "verifyTx",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506114e3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636667059914610030575b600080fd5b61004361003e36600461137b565b610057565b604051901515815260200160405180910390f35b60408051600c8082526101a08201909252600091829190602082016101808036833701905050905060005b600c8110156100d1578381600c811061009d5761009d611432565b60200201518282815181106100b4576100b4611432565b6020908102919091010152806100c98161145e565b915050610082565b506100dc81856100f9565b6000036100ed5760019150506100f3565b60009150505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816101256102d2565b905060006040518060400160405280600081526020016000815250905060005b8651811015610249578387828151811061016157610161611432565b6020026020010151106101e05760405162461bcd60e51b815260206004820152602760248201527f696e707574206973206c6172676572207468616e20736e61726b207363616c6160448201527f72206669656c6400000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b6102358261023085608001518460016101f99190611477565b8151811061020957610209611432565b60200260200101518a858151811061022357610223611432565b6020026020010151610b8b565b610be9565b9150806102418161145e565b915050610145565b5061027281836080015160008151811061026557610265611432565b6020026020010151610be9565b90506102b68560000151866020015161028a84610c3f565b856040015161029c8a60400151610c3f565b606088015188516102ac90610c3f565b8960200151610cde565b6102c657600193505050506100f3565b50600095945050505050565b6102da61114a565b6040805180820182527f2c16f3e97c09b7113428d44a5b6ec2be3134feaa6e45d4fa4445b86df69071d781527f305733c0deae31ffab7877a71943fe73a42e6379d484031e2c18d737bfcbb3896020808301919091529083528151608080820184527f2c6ae880e0d2bd2b835aa5ad63ff9c4dad3cce09f6a5cbe4c223b76c367c93618285019081527f241ad7582070a8d404ec8ed4568b7f35c940c1cf067e75c41ebb74cbb6349a47606080850191909152908352845180860186527f2eb541610c08cc190f0b21dfe84d69b1fa61316a31d56f8cc94265ec4a8fc68d81527f2fba81596dc14e321a2b5d896bee095ea81d5f5c74911f0dabcdcf8a3e1bd07d818601528385015285840192909252835180820185527f07f72badaf96672eac55e360c39cca813b318064b7488e912e33b4eabafcc9588186019081527f034d5d209ee6ce606f853688430d62a9412632382c6c8037ab01ec78035b37b5828501528152845180860186527f2b1ef9d82591d6ae4047ba37f26092f26421942485fb6232331eda27337ac81a81527f19dd506b98e87ee4c936f2fe43cc61e6935439070d606f79ff7dcdc58ece50f8818601528185015285850152835190810184527f19ed618725fbb5cfc126b2eb9dbd55f86782bc19b977aac596fe0a1c4e6428448185019081527f30189dba705d7bdeb642c6d4a16ba14553adceace1c8a21fe0f9b8987de1ecdb828401528152835180850185527f2f7543be2fb9e466426f159ef3718cdbd9e40fa52b809ab87628873a8003c6f381527f0ef423ea0728e923e984919dcc6e06b4c036f0d156529202a99ee64ae9eaa8d68185015281840152908401528151600d8082526101c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161055657505060808201908152604080518082019091527f2d6d159ef2e5a2d9260854217810b366a94c914dec6bbbf2adfb138982bb0ab981527f2668286ae701ec6eaed558873b61983bab026e1a863a6945c5e8ca5b05f5d29f6020820152905180516000906105e9576105e9611432565b602002602001018190525060405180604001604052807f1687e517155d177b73991add9430401eee3d0e5f8388df886433e37b8bd56d4381526020017f264907271d03c2690d01e67b7ffec1c916aa58cff2c7fac407dd55b721bbb812815250816080015160018151811061066057610660611432565b602002602001018190525060405180604001604052807f026ac8eb0c387478f81f65caa27c032eeb1353039d95a65ee4648d040a4a38d881526020017f1487d848fc411e9e44a2d5c9b66b8e0cc2c2fd83bd98d4032e35e02df2eb09e281525081608001516002815181106106d7576106d7611432565b602002602001018190525060405180604001604052807f2a851ccb926bc4410a16ebf5f03d8e17782a887788429dd501f1ca79681f95df81526020017f13d71f11efb6657df0cd410907aaadd3b2b907d9e07264a0af8ee1e89281f7d4815250816080015160038151811061074e5761074e611432565b602002602001018190525060405180604001604052807f22bb5c87dbbbf6af1d438ac86e7a552a21d36dc9e179ed99f573ce43ac038d2581526020017f227a62f17d50e2d126c7d097dad2c2c05a4480b9152869857284c08a1851015681525081608001516004815181106107c5576107c5611432565b602002602001018190525060405180604001604052807f1f9d302d2381c4ed4074091e45d7fd10a1e912838f8c2ee01a605fab05c00fe681526020017f28584ff6d9781f82dcd6675311b999ad1d97d9f6ceb0ce568033f5f709dec9d9815250816080015160058151811061083c5761083c611432565b602002602001018190525060405180604001604052807f0221699e5ee7825ea70743828000891d788021d25a1bab5044e9cd320f184c2481526020017f132cd541deac4837e1699a084e12fe254c1cc75a09d0a29e088e3c0df040d18881525081608001516006815181106108b3576108b3611432565b602002602001018190525060405180604001604052807f2e9261f101f1eec8f963382b32ddd4d2cb73dc73b201a04749f7b460dfaf7db381526020017f04842322a69784daeaf3597ed02b5950287a9956ca4757cee9e8b8103babeae6815250816080015160078151811061092a5761092a611432565b602002602001018190525060405180604001604052807f196bfec04804a244958280f8d07f9d2a0edf3b08c410713f1faa45968cbafe6681526020017f0915fd0db6b5066068806cd7292b27c632ee33ff4eef136623f02fbc05d97d9681525081608001516008815181106109a1576109a1611432565b602002602001018190525060405180604001604052807f1c16615edc083f3e541cad5aa52601821768b445764a3fee3c614a082e97263c81526020017f227710ad7e4e8b071ab9fcdc53c938a512b794c32d63e30ae1e1dc7522e944fe8152508160800151600981518110610a1857610a18611432565b602002602001018190525060405180604001604052807f196869c1c3b919edb2529f5f633dc24725b8cadceff579fde5429d869ffb544081526020017f2f86cb9d65aa8fc25df4f00f91643ddfae3545f871f3cf8e066a6929c598a4f48152508160800151600a81518110610a8f57610a8f611432565b602002602001018190525060405180604001604052807f1ded34a01eebcf9b7123d40c61ec3de69dc9eae5d3ac8bcf6001c122e9ce915381526020017f2dd7c6de0305561fcab8e9855c2d3a489a96fe1ff7d53dc0f2378a01df6884338152508160800151600b81518110610b0657610b06611432565b602002602001018190525060405180604001604052807f1749e5ce342f609026264b59ad7b589add7633a493ba8dae1eda4137cf58409a81526020017f1ee8da535e8490a6044fc7a7469005cfaa27f4a7be98bca064536d5b3c1a4a4f8152508160800151600c81518110610b7d57610b7d611432565b602002602001018190525090565b6040805180820190915260008082526020820152610ba761119b565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610bd657fe5b5080610be157600080fd5b505092915050565b6040805180820190915260008082526020820152610c056111b9565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610bd657fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610c8657506020830151155b15610ca65750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610ccb919061148a565b610cd590846114ac565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610cf957505060408051600480825260a0820190925291925060009190602082015b610d436111d7565b815260200190600190039081610d3b5790505090508a82600081518110610d6c57610d6c611432565b60200260200101819052508882600181518110610d8b57610d8b611432565b60200260200101819052508682600281518110610daa57610daa611432565b60200260200101819052508482600381518110610dc957610dc9611432565b60200260200101819052508981600081518110610de857610de8611432565b60200260200101819052508781600181518110610e0757610e07611432565b60200260200101819052508581600281518110610e2657610e26611432565b60200260200101819052508381600381518110610e4557610e45611432565b6020026020010181905250610e5a8282610e69565b9b9a5050505050505050505050565b60008151835114610e7957600080fd5b82516000610e888260066114bf565b905060008167ffffffffffffffff811115610ea557610ea5611238565b604051908082528060200260200182016040528015610ece578160200160208202803683370190505b50905060005b8381101561110957868181518110610eee57610eee611432565b60200260200101516000015182826006610f0891906114bf565b610f13906000611477565b81518110610f2357610f23611432565b602002602001018181525050868181518110610f4157610f41611432565b60200260200101516020015182826006610f5b91906114bf565b610f66906001611477565b81518110610f7657610f76611432565b602002602001018181525050858181518110610f9457610f94611432565b60209081029190910181015151015182610faf8360066114bf565b610fba906002611477565b81518110610fca57610fca611432565b602002602001018181525050858181518110610fe857610fe8611432565b60209081029190910101515151826110018360066114bf565b61100c906003611477565b8151811061101c5761101c611432565b60200260200101818152505085818151811061103a5761103a611432565b60200260200101516020015160016002811061105857611058611432565b6020020151826110698360066114bf565b611074906004611477565b8151811061108457611084611432565b6020026020010181815250508581815181106110a2576110a2611432565b6020026020010151602001516000600281106110c0576110c0611432565b6020020151826110d18360066114bf565b6110dc906005611477565b815181106110ec576110ec611432565b6020908102919091010152806111018161145e565b915050610ed4565b506111126111fc565b6000602082602086026020860160086107d05a03fa9050808061113157fe5b508061113c57600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016111746111d7565b81526020016111816111d7565b815260200161118e6111d7565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806111ea61121a565b81526020016111f761121a565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561127157611271611238565b60405290565b6040516060810167ffffffffffffffff8111828210171561127157611271611238565b6000604082840312156112ac57600080fd5b6112b461124e565b9050813581526020820135602082015292915050565b600060405161018080820182811067ffffffffffffffff821117156112f1576112f1611238565b604052909150819083018481111561130857600080fd5b835b8181101561132257803583526020928301920161130a565b50505092915050565b600082601f83011261133c57600080fd5b61134461124e565b80604084018581111561135657600080fd5b845b81811015611370578035845260209384019301611358565b509095945050505050565b60008082840361028081121561139057600080fd5b610100808212156113a057600080fd5b6113a8611277565b6113b2878761129a565b81526080603f19840112156113c657600080fd5b6113ce61124e565b92506113dd876040880161132b565b83526113ec876080880161132b565b60208401528260208201526114048760c0880161129a565b6040820152935061011f8501861361141b57600080fd5b611427868287016112ca565b925050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161147057611470611448565b5060010190565b808201808211156100f3576100f3611448565b6000826114a757634e487b7160e01b600052601260045260246000fd5b500690565b818103818111156100f3576100f3611448565b80820281158282048414176100f3576100f361144856fea164736f6c6343000812000a";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Verifier> {
    return super.deploy(overrides || {}) as Promise<Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  override connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
