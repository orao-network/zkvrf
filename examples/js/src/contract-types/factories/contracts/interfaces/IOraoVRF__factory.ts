/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IOraoVRF,
  IOraoVRFInterface,
} from "../../../contracts/interfaces/IOraoVRF";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "ORAO",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "cancelSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orao",
        type: "uint256",
      },
    ],
    name: "fundSubscription",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getConfig",
    outputs: [
      {
        internalType: "uint32",
        name: "maxGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint96",
        name: "oraoFee",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "baseFee",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subOwner",
        type: "address",
      },
    ],
    name: "getSubscription",
    outputs: [
      {
        internalType: "uint96",
        name: "orao",
        type: "uint96",
      },
      {
        internalType: "int96",
        name: "base",
        type: "int96",
      },
      {
        internalType: "uint64",
        name: "pendingReqCount",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subOwner",
        type: "address",
      },
    ],
    name: "pendingRequestExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "seed",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    name: "request",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IOraoVRF__factory {
  static readonly abi = _abi;
  static createInterface(): IOraoVRFInterface {
    return new utils.Interface(_abi) as IOraoVRFInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOraoVRF {
    return new Contract(address, _abi, signerOrProvider) as IOraoVRF;
  }
}
